## Comandos para python

## dicas

- x**y = x elevado a y
- :.2f = quantas casas decimais
- a função len retorna a qtd de caracteres da str
- .sort() = ordena
- .sort(reverse = true) = ordena ao contrario
- .isdigit(valor) = ve se é um digito
- .isinstance(valor,type) = ve se é daquele type


### print()

print(12,34,56,78, sep='-', end=' :\n')
print(20,21,22,23, sep='-', end=' :\n')
print('oi', sep='-', end=' :\n')

#### sep = separador
#### end = como vai terminar o seu print (\n é o padrao)

### input()

input = coletar dados do usuario

o ideal é colocar o input em uma variavel
ex:   entrada = input('Você quer "entrar" ou "sair"? ')

### string (str)

strings são vetores

f string = f'teste {teste:.2f} teste' # fstring oq ta entre chaves vira variavel

.strip remove espaços em branco
.center coloca no centro


### if (se)

 if/elif/else 

ex:
     
         valor_1 = input()
     valor_2 = input()
     
     if (valor_1 > valor_2):
         print(f'{valor_1} é maior que o {valor_2}')
         
     elif (valor_2 > valor_1):
         
         print(f'{valor_2} é maior que o {valor_1}')
     else:
         print(f'{valor_1} e {valor_2} são iguais')

### Operadores in e not in

Strings são iteráveis

 0 1 2 3 4 5
 O t á v i o
-6-5-4-3-2-1

    nome = 'Otávio'
    print(nome[2]) 
    print(nome[-4])
    print('vio' in nome)
    print('zero' in nome)
    print(10 * '-')
    print('vio' not in nome)
    print('zero' not in nome)

ex de in:

    nome = input('Digite seu nome: ')
    encontrar = input('Digite o que deseja encontrar: ')

    if encontrar in nome:
        print(f'{encontrar} está em {nome}')
    else:
        print(f'{encontrar} não está em {nome}')
 

### Fatiamento de strings

Fatiamento [i:f:p] [::] <i = inicio, f = fim, p = partição>

variavel = 'Olá mundo'
print(variavel[::-1])

### While (enquanto)

while condição:

    break: para o while
    continue: ignora o restante do codigo

### for (para)
    texto = 'python'

for letra in texto:
    print(letra)

### Range 

    range(start,stop,step)

### list
[] = cria lista

Métodos úteis:
    append() - Adiciona um item ao final
    insert(x,y) - Adiciona um item no índice escolhido
    pop() - Remove do final ou do índice escolhido
    del() - apaga um índice
    clear() - limpa a lista
    extend() - estende a lista
    copy()
    + - concatena listas

### tuplas

lista imutaveis

### round

round("valor", "quantas casas decimais")

### split e join

split("pode passar o caracter de divisão")
'separador'.join("item que quer unir")

    """
    split e join com list e str
    split - divide uma string (list)
    join - une uma string
    """
    frase = '   Olha só que   , coisa interessante          '
    lista_frases_cruas = frase.split(',')

    lista_frases = []
    for i, frase in enumerate(lista_frases_cruas):
        lista_frases.append(lista_frases_cruas[i].strip())

    # print(lista_frases_cruas)
    # print(lista_frases)
    frases_unidas = ', '.join(lista_frases)
    print(frases_unidas)

### obs

print(*lista) = ele passa por todos os itens da lista 

### operação ternária

<valor> if <condição> else <outro valor>


### random

random.randint() = gera numeros inteiros randomicamente

### .replace('item que quer tirar' , 'item que vai substituir')


### função

def nome()

<!-- Higher Order Functions - Funções que podem receber e/ou retornar outras funções

First-Class Functions - Funções que são tratadas como outros tipos de dados comuns (strings, inteiros, etc...) -->

### empacotamento
<!-- vai salvar ultimos 2 digitos na variavel resto -->
x, y, *resto = 1, 2, 3, 4 
print(x,y, resto)

*variavel

### função soma

sum()

### closure



### dict

pessoa = {
    'chave': 'valor'
    nome : 'valor'
}

print(pessoa['chave']) 

if pessoa.get() is none 

# Métodos úteis dos dicionários em Python
# len - quantas chaves
# keys - iterável com as chaves
# values - iterável com os valores
# items - iterável com chaves e valores
# setdefault - adiciona valor se a chave não existe
# copy - retorna uma cópia rasa (shallow copy)
# get - obtém uma chave
# pop - Apaga um item com a chave especificada (del)
# popitem - Apaga o último item adicionado
# update - Atualiza um dicionário com outro
pessoa = {
    'nome': 'Luiz Otávio',
    'sobrenome': 'Miranda',
    'idade': 900,
}

dict1 = {}
dict2 = {}

<!-- para juntar os dois em um só -->
dict3 = **dict1, **dict2

pessoa.setdefault('idade', 0)
print(pessoa['idade'])

# print(len(pessoa))
# print(list(pessoa.keys()))
# print(list(pessoa.values()))
# print(list(pessoa.items()))

# for valor in pessoa.values():
#     print(valor)

# for chave, valor in pessoa.items():
#     print(chave, valor)

<!-- deep copy -->

### set 

set = conjunto

set() ou {1,2,3} (sem chave e valor, só valor)

metodos 
. add
. update
. clear
. discard

s3 = s1 | s2 união
s3 = s1 & s2 interseção
s3 = s2 - s1 diferença
s3 = s1 ^ s2 diferença simetrica

### função lambda 

1 linha e sem nome

lambda item: item['nome']
lambda = function
item = argumento
item = return

**kwargs = nomeados
*args = nao nomeados

### list comprehension


lista = []

lista = [
    numero * 2
    for numero in range(10)
]
print(lista)

mapeamento for filtro

mais detalhes = https://youtu.be/1YbTDczvqco

### iterator

iter(next())

### generator

funções que sabem pausar
serve para guardar listas grandes sem ocupar espaço na memoria

lista = [n for n in range(1000000)]
generator = (n for n in range(1000000))

print(generator)

# for n in generator:
#     print(n)

yield from = pega de um outro generator

### try except finally 

https://docs.python.org/pt-br/3/library/exceptions.html#built-in-exceptions
try:
    print('ABRIR ARQUIVO')
    8/0
except ZeroDivisionError as e:
    print(e.__class__.__name__)
    print(e)
    print('DIVIDIU ZERO')
except IndexError as error:
    print('IndexError')
except (NameError, ImportError):
    print('NameError, ImportError')
else:
    print('Não deu erro')
finally:
    print('FECHAR ARQUIVO')

### raise

lançar erros e informar oq ta fazendo de errado

### modulos

modulos saõ singleton = só carregam uma vez 
só carrega varias vezes se vc usar o modulo importlib.reload()

## 

{chave:valor} = dict
() = tuple
[] = list
{} = conjunto